inline std::string luaCommandString = "function mapFunc(x, in_min, in_max, out_min, out_max)\n    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min\n    end\n\nfunction lfo(...)\nwaveType = 'sin';\nwaveSpeed=1;\nwaveMin=-1;\nwaveMax=1;\nlocal arg = {...}\nfor i,v in ipairs(arg) do\n        if i == 1 then\n        waveType = v\n        end\n        if i == 2 then\n        waveSpeed= v\n        end\n        if i == 3 then\n        waveMin = v\n        end\n        if i == 4 then\n        waveMax = v\n        end\n    end\nevalTime = currentTime*waveSpeed\nfracCount = evalTime - math.floor(evalTime)\nif waveType == 'sin' then\n    waveOutput = mapFunc(math.sin(2*math.pi*evalTime),-1,1,waveMin,waveMax)\nend\nif waveType == 'sqr' then\n    if(fracCount<0.5) then\n    sqrOut=1\n    else\n    sqrOut=0\n    end\n    waveOutput = mapFunc(sqrOut, 0, 1, waveMin, waveMax)\nend\nif waveType == 'ramp' then\n    waveOutput = mapFunc(fracCount,0,1,waveMin,waveMax)\nend\nif waveType == 'saw' then\n    waveOutput = mapFunc(fracCount,1,0,waveMin,waveMax)\nend\nreturn(waveOutput)\nend\n\nfunction quantize(inputNote, inputScale)\n    closestNote = 13\n    diffIndex=13\n    octaveBase = math.floor(inputNote/12)*12\n    noteInOctave=inputNote-octaveBase\n    activeNotes = 0\n    for i = 1, 12 do\n    if inputScale[i] > 0 then\n    activeNotes = activeNotes + 1\n    end\n    end\n    posAway = {13,13,13,13,13,13,13,13,13,13,13,13}\n    negPos = {}\n    if activeNotes > 0 then\n      for i = 1, 12 do\n        if inputScale[i] > 0 then\n          posAway[i]=noteInOctave-(i-1)\n          print(posAway[i])\n        end\n    end\n    for i = 1, 12 do\n    if math.abs(posAway[i]) < closestNote then\n      closestNote = math.abs(posAway[i])\n      diffIndex=i\n    end\n    end\n    return inputNote-posAway[diffIndex]\n    else\n    return inputNote\n    end\n    end\n\nfunction choose(...)\n    local chooseList={}\n    local numChoices=0\n    local arg = {...}\n    for i,v in ipairs(arg) do\n            chooseList[i]=v\n            numChoices = numChoices + 1\n            end\n            return(chooseList[math.random(1,numChoices)])\n    end\n\n    function range(input1, input2)\n        return(mapFunc(math.random(),0,1,input1,input2))\n        end\n\n";